angular.module('angularvideo', ['ui.router', 'ngSanitize']).config(["$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
  $urlRouterProvider.otherwise('/videos');
  return $stateProvider.state('videos', {
    url: '/videos',
    templateUrl: 'videos.tpl.html',
    controller: 'VideosCtrl'
  }).state('video', {
    url: '/video/:id',
    templateUrl: 'video.tpl.html',
    controller: 'VideoCtrl'
  });
}]);

angular.module('angularvideo').controller('VideoCtrl', ["$scope", "$sce", "$stateParams", "Videos", function($scope, $sce, $stateParams, Videos) {
  var idVideo;
  idVideo = JSON.parse($stateParams.id);
  return Videos.getOne(idVideo).then(function(video) {
    video.src = $sce.trustAsResourceUrl(video.src);
    return $scope.video = video;
  }, function(reason) {
    return alert(reason);
  });
}]);

angular.module('angularvideo').directive('secondsToMinutes', function() {
  return {
    link: function(scope, element, attr) {
      var secondsToMinutes;
      secondsToMinutes = function(time) {
        var hrs, mins, ret, secs;
        mins = ~~(time / 60);
        secs = time % 60;
        hrs = ~~(time / 3600);
        mins = ~~(time % 3600 / 60);
        secs = time % 60;
        ret = '';
        if (mins < 10) {
          mins = '0' + mins;
        }
        if (hrs > 0) {
          ret += '' + hrs + ':' + (mins < 10 ? '0' : '');
        }
        ret += '' + mins + ':' + (secs < 10 ? '0' : '');
        ret += '' + secs;
        return ret;
      };
      return element.replaceWith(secondsToMinutes(attr.secondsToMinutes));
    }
  };
});

angular.module('angularvideo').directive('videoInterface', function() {
  return {
    link: function(scope, element, attr) {
      var listener, videoEl, videoSrc;
      videoEl = document.createElement('video');
      videoSrc = document.createElement('source');
      videoEl.setAttribute('controls', true);
      videoSrc.setAttribute('type', 'video/mp4');
      videoEl.appendChild(videoSrc);
      element.replaceWith(videoEl);
      listener = scope.$watch('video', function(video) {
        if (video != null) {
          videoSrc.setAttribute('src', video.src);
          videoEl.load();
          return listener();
        }
      });
      return scope.setTime = function(time) {
        return videoEl.currentTime = time;
      };
    }
  };
});

angular.module('angularvideo').controller('VideosCtrl', ["$scope", "Videos", function($scope, Videos) {
  $scope.videos = [];
  return Videos.getAll().then(function(videos) {
    return $scope.videos = videos.data;
  }, function(reason) {
    return alert(reason);
  });
}]);

angular.module('angularvideo').factory('Videos', ["$http", "$q", function($http, $q) {
  return {
    getAll: function() {
      var deferred;
      deferred = $q.defer();
      $http.get('/api/videos').success(function(data, status, headers, config) {
        return deferred.resolve(data, status, headers, config);
      }).error(function(data, status, headers, config) {
        return deferred.reject(data, status, headers, config);
      });
      return deferred.promise;
    },
    getOne: function(id) {
      var deferred;
      deferred = $q.defer();
      $http.get("/api/videos/one/" + parseInt(id)).success(function(data, status, headers, config) {
        return deferred.resolve(data, status, headers, config);
      }).error(function(data, status, headers, config) {
        return deferred.reject(data, status, headers, config);
      });
      return deferred.promise;
    }
  };
}]);

//# sourceMappingURL=data:application/json;base64,